basePath: /
definitions:
  domain.Book:
    properties:
      author:
        type: string
      id:
        type: integer
      rating:
        type: integer
      title:
        type: string
    type: object
  domain.UpdateBookInput:
    properties:
      author:
        type: string
      rating:
        type: integer
      title:
        type: string
    type: object
  domain.User:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      password:
        type: string
    type: object
  rest.errorResponse:
    properties:
      message:
        type: string
    type: object
host: localhost:8000
info:
  contact: {}
  description: API Server for Books Application
  title: Books App API
  version: "1.0"
paths:
  /auth/sign-up:
    post:
      consumes:
      - application/json
      operationId: create-user
      parameters:
      - description: Update input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/domain.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: integer
        default:
          description: ""
          schema:
            $ref: '#/definitions/rest.errorResponse'
      summary: Create User
      tags:
      - Users AUTH
  /books/:
    get:
      consumes:
      - application/json
      operationId: get-all-books
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: integer
        default:
          description: ""
          schema:
            $ref: '#/definitions/rest.errorResponse'
      summary: Get All Books
      tags:
      - Books REST
    post:
      consumes:
      - application/json
      operationId: create-book
      parameters:
      - description: book info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/domain.Book'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: integer
        default:
          description: ""
          schema:
            $ref: '#/definitions/rest.errorResponse'
      summary: Create Book
      tags:
      - Books REST
  /books/{id}:
    delete:
      consumes:
      - application/json
      operationId: delete-book
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: integer
        default:
          description: ""
          schema:
            $ref: '#/definitions/rest.errorResponse'
      summary: Delete Book
      tags:
      - Books REST
    get:
      consumes:
      - application/json
      operationId: get-book-by-id
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: integer
        default:
          description: ""
          schema:
            $ref: '#/definitions/rest.errorResponse'
      summary: Get Book by ID
      tags:
      - Books REST
    put:
      consumes:
      - application/json
      operationId: update-book
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/domain.UpdateBookInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: integer
        default:
          description: ""
          schema:
            $ref: '#/definitions/rest.errorResponse'
      summary: Update Book
      tags:
      - Books REST
swagger: "2.0"
